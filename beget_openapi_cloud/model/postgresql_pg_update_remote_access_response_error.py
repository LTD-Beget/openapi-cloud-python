# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class PostgresqlPgUpdateRemoteAccessResponseError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            message = schemas.StrSchema
            
            
            class code(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'enum'
                    enum_value_to_name = {
                        "_": "_",
                        "INVALID_STATE": "INVALID_STATE",
                        "SERVICE_DISABLED": "SERVICE_DISABLED",
                        "INVALID_SUBNET_ADDRESS": "INVALID_SUBNET_ADDRESS",
                        "IP_IS_IN_EXISTED_SUBNET": "IP_IS_IN_EXISTED_SUBNET",
                        "SUBNET_IS_IN_EXISTED_SUBNET": "SUBNET_IS_IN_EXISTED_SUBNET",
                        "SUBNET_IS_PRIVATE": "SUBNET_IS_PRIVATE",
                    }
                
                @schemas.classproperty
                def _(cls):
                    return cls("_")
                
                @schemas.classproperty
                def INVALID_STATE(cls):
                    return cls("INVALID_STATE")
                
                @schemas.classproperty
                def SERVICE_DISABLED(cls):
                    return cls("SERVICE_DISABLED")
                
                @schemas.classproperty
                def INVALID_SUBNET_ADDRESS(cls):
                    return cls("INVALID_SUBNET_ADDRESS")
                
                @schemas.classproperty
                def IP_IS_IN_EXISTED_SUBNET(cls):
                    return cls("IP_IS_IN_EXISTED_SUBNET")
                
                @schemas.classproperty
                def SUBNET_IS_IN_EXISTED_SUBNET(cls):
                    return cls("SUBNET_IS_IN_EXISTED_SUBNET")
                
                @schemas.classproperty
                def SUBNET_IS_PRIVATE(cls):
                    return cls("SUBNET_IS_PRIVATE")
            __annotations__ = {
                "message": message,
                "code": code,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["message", "code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message", "code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PostgresqlPgUpdateRemoteAccessResponseError':
        return super().__new__(
            cls,
            *args,
            message=message,
            code=code,
            _configuration=_configuration,
            **kwargs,
        )
