# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class StructuresPostgresqlRestoreOrder(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def copy_info() -> typing.Type['StructuresPostgresqlCopy']:
                return StructuresPostgresqlCopy
            backup_date_create = schemas.StrSchema
            service_id = schemas.StrSchema
            service_name = schemas.StrSchema
            date_create = schemas.StrSchema
            date_complete = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'enum'
                    enum_value_to_name = {
                        "_": "_",
                        "PROCESSING": "PROCESSING",
                        "COMPLETED": "COMPLETED",
                        "ERROR": "ERROR",
                    }
                
                @schemas.classproperty
                def _(cls):
                    return cls("_")
                
                @schemas.classproperty
                def PROCESSING(cls):
                    return cls("PROCESSING")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
            __annotations__ = {
                "id": id,
                "copy_info": copy_info,
                "backup_date_create": backup_date_create,
                "service_id": service_id,
                "service_name": service_name,
                "date_create": date_create,
                "date_complete": date_complete,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copy_info"]) -> 'StructuresPostgresqlCopy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_date_create"]) -> MetaOapg.properties.backup_date_create: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_id"]) -> MetaOapg.properties.service_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_name"]) -> MetaOapg.properties.service_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_complete"]) -> MetaOapg.properties.date_complete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "copy_info", "backup_date_create", "service_id", "service_name", "date_create", "date_complete", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copy_info"]) -> typing.Union['StructuresPostgresqlCopy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_date_create"]) -> typing.Union[MetaOapg.properties.backup_date_create, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_id"]) -> typing.Union[MetaOapg.properties.service_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_name"]) -> typing.Union[MetaOapg.properties.service_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> typing.Union[MetaOapg.properties.date_create, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_complete"]) -> typing.Union[MetaOapg.properties.date_complete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "copy_info", "backup_date_create", "service_id", "service_name", "date_create", "date_complete", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        copy_info: typing.Union['StructuresPostgresqlCopy', schemas.Unset] = schemas.unset,
        backup_date_create: typing.Union[MetaOapg.properties.backup_date_create, str, schemas.Unset] = schemas.unset,
        service_id: typing.Union[MetaOapg.properties.service_id, str, schemas.Unset] = schemas.unset,
        service_name: typing.Union[MetaOapg.properties.service_name, str, schemas.Unset] = schemas.unset,
        date_create: typing.Union[MetaOapg.properties.date_create, str, schemas.Unset] = schemas.unset,
        date_complete: typing.Union[MetaOapg.properties.date_complete, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StructuresPostgresqlRestoreOrder':
        return super().__new__(
            cls,
            *args,
            id=id,
            copy_info=copy_info,
            backup_date_create=backup_date_create,
            service_id=service_id,
            service_name=service_name,
            date_create=date_create,
            date_complete=date_complete,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_cloud.model.structures_postgresql_copy import StructuresPostgresqlCopy
