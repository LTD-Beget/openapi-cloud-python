# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class MysqlMysql8(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def configuration() -> typing.Type['MysqlMysql8Configuration']:
                return MysqlMysql8Configuration
            host = schemas.StrSchema
            port = schemas.IntSchema
        
            @staticmethod
            def address_info() -> typing.Type['StructuresAddressInfo']:
                return StructuresAddressInfo
            pma_url = schemas.StrSchema
            disk_used = schemas.StrSchema
            disk_left = schemas.StrSchema
            read_only = schemas.BoolSchema
            pma_installing = schemas.BoolSchema
            __annotations__ = {
                "configuration": configuration,
                "host": host,
                "port": port,
                "address_info": address_info,
                "pma_url": pma_url,
                "disk_used": disk_used,
                "disk_left": disk_left,
                "read_only": read_only,
                "pma_installing": pma_installing,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configuration"]) -> 'MysqlMysql8Configuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_info"]) -> 'StructuresAddressInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pma_url"]) -> MetaOapg.properties.pma_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disk_used"]) -> MetaOapg.properties.disk_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disk_left"]) -> MetaOapg.properties.disk_left: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["read_only"]) -> MetaOapg.properties.read_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pma_installing"]) -> MetaOapg.properties.pma_installing: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["configuration", "host", "port", "address_info", "pma_url", "disk_used", "disk_left", "read_only", "pma_installing", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configuration"]) -> typing.Union['MysqlMysql8Configuration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> typing.Union[MetaOapg.properties.host, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_info"]) -> typing.Union['StructuresAddressInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pma_url"]) -> typing.Union[MetaOapg.properties.pma_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disk_used"]) -> typing.Union[MetaOapg.properties.disk_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disk_left"]) -> typing.Union[MetaOapg.properties.disk_left, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["read_only"]) -> typing.Union[MetaOapg.properties.read_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pma_installing"]) -> typing.Union[MetaOapg.properties.pma_installing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["configuration", "host", "port", "address_info", "pma_url", "disk_used", "disk_left", "read_only", "pma_installing", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        configuration: typing.Union['MysqlMysql8Configuration', schemas.Unset] = schemas.unset,
        host: typing.Union[MetaOapg.properties.host, str, schemas.Unset] = schemas.unset,
        port: typing.Union[MetaOapg.properties.port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        address_info: typing.Union['StructuresAddressInfo', schemas.Unset] = schemas.unset,
        pma_url: typing.Union[MetaOapg.properties.pma_url, str, schemas.Unset] = schemas.unset,
        disk_used: typing.Union[MetaOapg.properties.disk_used, str, schemas.Unset] = schemas.unset,
        disk_left: typing.Union[MetaOapg.properties.disk_left, str, schemas.Unset] = schemas.unset,
        read_only: typing.Union[MetaOapg.properties.read_only, bool, schemas.Unset] = schemas.unset,
        pma_installing: typing.Union[MetaOapg.properties.pma_installing, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MysqlMysql8':
        return super().__new__(
            cls,
            *args,
            configuration=configuration,
            host=host,
            port=port,
            address_info=address_info,
            pma_url=pma_url,
            disk_used=disk_used,
            disk_left=disk_left,
            read_only=read_only,
            pma_installing=pma_installing,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_cloud.model.mysql_mysql8_configuration import MysqlMysql8Configuration
from beget_openapi_cloud.model.structures_address_info import StructuresAddressInfo
