# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class CloudServiceConfiguration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            price_day = schemas.Float64Schema
            price_month = schemas.Float64Schema
            region = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MYSQL5(cls):
                    return cls("MYSQL5")
                
                @schemas.classproperty
                def MYSQL8(cls):
                    return cls("MYSQL8")
                
                @schemas.classproperty
                def MYSQL84(cls):
                    return cls("MYSQL84")
                
                @schemas.classproperty
                def POSTGRESQL14(cls):
                    return cls("POSTGRESQL14")
                
                @schemas.classproperty
                def POSTGRESQL15(cls):
                    return cls("POSTGRESQL15")
                
                @schemas.classproperty
                def S_3(cls):
                    return cls("S_3")
                
                @schemas.classproperty
                def POSTGRESQL164(cls):
                    return cls("POSTGRESQL164")
        
            @staticmethod
            def mysql5() -> typing.Type['MysqlMysql5Configuration']:
                return MysqlMysql5Configuration
        
            @staticmethod
            def mysql8() -> typing.Type['MysqlMysql8Configuration']:
                return MysqlMysql8Configuration
        
            @staticmethod
            def mysql84() -> typing.Type['MysqlMysql84Configuration']:
                return MysqlMysql84Configuration
        
            @staticmethod
            def postgresql15() -> typing.Type['PostgresqlPostgresql15Configuration']:
                return PostgresqlPostgresql15Configuration
        
            @staticmethod
            def postgresql14() -> typing.Type['PostgresqlPostgresql14Configuration']:
                return PostgresqlPostgresql14Configuration
        
            @staticmethod
            def postgresql164() -> typing.Type['PostgresqlPostgresql164Configuration']:
                return PostgresqlPostgresql164Configuration
        
            @staticmethod
            def s3() -> typing.Type['S3S3Configuration']:
                return S3S3Configuration
            __annotations__ = {
                "id": id,
                "price_day": price_day,
                "price_month": price_month,
                "region": region,
                "type": type,
                "mysql5": mysql5,
                "mysql8": mysql8,
                "mysql84": mysql84,
                "postgresql15": postgresql15,
                "postgresql14": postgresql14,
                "postgresql164": postgresql164,
                "s3": s3,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_day"]) -> MetaOapg.properties.price_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_month"]) -> MetaOapg.properties.price_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mysql5"]) -> 'MysqlMysql5Configuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mysql8"]) -> 'MysqlMysql8Configuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mysql84"]) -> 'MysqlMysql84Configuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postgresql15"]) -> 'PostgresqlPostgresql15Configuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postgresql14"]) -> 'PostgresqlPostgresql14Configuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postgresql164"]) -> 'PostgresqlPostgresql164Configuration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s3"]) -> 'S3S3Configuration': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "price_day", "price_month", "region", "type", "mysql5", "mysql8", "mysql84", "postgresql15", "postgresql14", "postgresql164", "s3", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_day"]) -> typing.Union[MetaOapg.properties.price_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_month"]) -> typing.Union[MetaOapg.properties.price_month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mysql5"]) -> typing.Union['MysqlMysql5Configuration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mysql8"]) -> typing.Union['MysqlMysql8Configuration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mysql84"]) -> typing.Union['MysqlMysql84Configuration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postgresql15"]) -> typing.Union['PostgresqlPostgresql15Configuration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postgresql14"]) -> typing.Union['PostgresqlPostgresql14Configuration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postgresql164"]) -> typing.Union['PostgresqlPostgresql164Configuration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s3"]) -> typing.Union['S3S3Configuration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "price_day", "price_month", "region", "type", "mysql5", "mysql8", "mysql84", "postgresql15", "postgresql14", "postgresql164", "s3", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        price_day: typing.Union[MetaOapg.properties.price_day, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        price_month: typing.Union[MetaOapg.properties.price_month, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        mysql5: typing.Union['MysqlMysql5Configuration', schemas.Unset] = schemas.unset,
        mysql8: typing.Union['MysqlMysql8Configuration', schemas.Unset] = schemas.unset,
        mysql84: typing.Union['MysqlMysql84Configuration', schemas.Unset] = schemas.unset,
        postgresql15: typing.Union['PostgresqlPostgresql15Configuration', schemas.Unset] = schemas.unset,
        postgresql14: typing.Union['PostgresqlPostgresql14Configuration', schemas.Unset] = schemas.unset,
        postgresql164: typing.Union['PostgresqlPostgresql164Configuration', schemas.Unset] = schemas.unset,
        s3: typing.Union['S3S3Configuration', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudServiceConfiguration':
        return super().__new__(
            cls,
            *args,
            id=id,
            price_day=price_day,
            price_month=price_month,
            region=region,
            type=type,
            mysql5=mysql5,
            mysql8=mysql8,
            mysql84=mysql84,
            postgresql15=postgresql15,
            postgresql14=postgresql14,
            postgresql164=postgresql164,
            s3=s3,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_cloud.model.mysql_mysql5_configuration import MysqlMysql5Configuration
from beget_openapi_cloud.model.mysql_mysql84_configuration import MysqlMysql84Configuration
from beget_openapi_cloud.model.mysql_mysql8_configuration import MysqlMysql8Configuration
from beget_openapi_cloud.model.postgresql_postgresql14_configuration import PostgresqlPostgresql14Configuration
from beget_openapi_cloud.model.postgresql_postgresql15_configuration import PostgresqlPostgresql15Configuration
from beget_openapi_cloud.model.postgresql_postgresql164_configuration import PostgresqlPostgresql164Configuration
from beget_openapi_cloud.model.s3_s3_configuration import S3S3Configuration
