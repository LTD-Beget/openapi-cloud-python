# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class S3S3(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            public = schemas.BoolSchema
            access_key = schemas.StrSchema
            secret_key = schemas.StrSchema
            fqdn = schemas.StrSchema
            
            
            class cors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['S3Cors']:
                        return S3Cors
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['S3Cors'], typing.List['S3Cors']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'S3Cors':
                    return super().__getitem__(i)
            quota_used_size = schemas.IntSchema
        
            @staticmethod
            def ftp() -> typing.Type['S3Ftp']:
                return S3Ftp
        
            @staticmethod
            def sftp() -> typing.Type['S3Sftp']:
                return S3Sftp
            __annotations__ = {
                "public": public,
                "access_key": access_key,
                "secret_key": secret_key,
                "fqdn": fqdn,
                "cors": cors,
                "quota_used_size": quota_used_size,
                "ftp": ftp,
                "sftp": sftp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public"]) -> MetaOapg.properties.public: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_key"]) -> MetaOapg.properties.access_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret_key"]) -> MetaOapg.properties.secret_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fqdn"]) -> MetaOapg.properties.fqdn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cors"]) -> MetaOapg.properties.cors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quota_used_size"]) -> MetaOapg.properties.quota_used_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ftp"]) -> 'S3Ftp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sftp"]) -> 'S3Sftp': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["public", "access_key", "secret_key", "fqdn", "cors", "quota_used_size", "ftp", "sftp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public"]) -> typing.Union[MetaOapg.properties.public, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_key"]) -> typing.Union[MetaOapg.properties.access_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret_key"]) -> typing.Union[MetaOapg.properties.secret_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fqdn"]) -> typing.Union[MetaOapg.properties.fqdn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cors"]) -> typing.Union[MetaOapg.properties.cors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quota_used_size"]) -> typing.Union[MetaOapg.properties.quota_used_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ftp"]) -> typing.Union['S3Ftp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sftp"]) -> typing.Union['S3Sftp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["public", "access_key", "secret_key", "fqdn", "cors", "quota_used_size", "ftp", "sftp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        public: typing.Union[MetaOapg.properties.public, bool, schemas.Unset] = schemas.unset,
        access_key: typing.Union[MetaOapg.properties.access_key, str, schemas.Unset] = schemas.unset,
        secret_key: typing.Union[MetaOapg.properties.secret_key, str, schemas.Unset] = schemas.unset,
        fqdn: typing.Union[MetaOapg.properties.fqdn, str, schemas.Unset] = schemas.unset,
        cors: typing.Union[MetaOapg.properties.cors, list, tuple, schemas.Unset] = schemas.unset,
        quota_used_size: typing.Union[MetaOapg.properties.quota_used_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ftp: typing.Union['S3Ftp', schemas.Unset] = schemas.unset,
        sftp: typing.Union['S3Sftp', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'S3S3':
        return super().__new__(
            cls,
            *args,
            public=public,
            access_key=access_key,
            secret_key=secret_key,
            fqdn=fqdn,
            cors=cors,
            quota_used_size=quota_used_size,
            ftp=ftp,
            sftp=sftp,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_cloud.model.s3_cors import S3Cors
from beget_openapi_cloud.model.s3_ftp import S3Ftp
from beget_openapi_cloud.model.s3_sftp import S3Sftp
