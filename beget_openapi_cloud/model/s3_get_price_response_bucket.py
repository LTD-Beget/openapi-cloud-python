# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class S3GetPriceResponseBucket(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            display_name = schemas.StrSchema
            storage_size = schemas.IntSchema
            storage_rate = schemas.Float64Schema
            traffic_amount = schemas.IntSchema
            traffic_rate = schemas.Float64Schema
            __annotations__ = {
                "name": name,
                "display_name": display_name,
                "storage_size": storage_size,
                "storage_rate": storage_rate,
                "traffic_amount": traffic_amount,
                "traffic_rate": traffic_rate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage_size"]) -> MetaOapg.properties.storage_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage_rate"]) -> MetaOapg.properties.storage_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traffic_amount"]) -> MetaOapg.properties.traffic_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traffic_rate"]) -> MetaOapg.properties.traffic_rate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "display_name", "storage_size", "storage_rate", "traffic_amount", "traffic_rate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage_size"]) -> typing.Union[MetaOapg.properties.storage_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage_rate"]) -> typing.Union[MetaOapg.properties.storage_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traffic_amount"]) -> typing.Union[MetaOapg.properties.traffic_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traffic_rate"]) -> typing.Union[MetaOapg.properties.traffic_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "display_name", "storage_size", "storage_rate", "traffic_amount", "traffic_rate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
        storage_size: typing.Union[MetaOapg.properties.storage_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        storage_rate: typing.Union[MetaOapg.properties.storage_rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        traffic_amount: typing.Union[MetaOapg.properties.traffic_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        traffic_rate: typing.Union[MetaOapg.properties.traffic_rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'S3GetPriceResponseBucket':
        return super().__new__(
            cls,
            *args,
            name=name,
            display_name=display_name,
            storage_size=storage_size,
            storage_rate=storage_rate,
            traffic_amount=traffic_amount,
            traffic_rate=traffic_rate,
            _configuration=_configuration,
            **kwargs,
        )
