# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class CloudCreateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            configuration_id = schemas.StrSchema
            display_name = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def mysql_params() -> typing.Type['MysqlCreateParams']:
                return MysqlCreateParams
        
            @staticmethod
            def postgresql_params() -> typing.Type['PostgresqlPgCreateParams']:
                return PostgresqlPgCreateParams
        
            @staticmethod
            def s3_params() -> typing.Type['S3S3CreateParams']:
                return S3S3CreateParams
            extra = schemas.StrSchema
            region = schemas.StrSchema
            __annotations__ = {
                "configuration_id": configuration_id,
                "display_name": display_name,
                "description": description,
                "mysql_params": mysql_params,
                "postgresql_params": postgresql_params,
                "s3_params": s3_params,
                "extra": extra,
                "region": region,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configuration_id"]) -> MetaOapg.properties.configuration_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mysql_params"]) -> 'MysqlCreateParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postgresql_params"]) -> 'PostgresqlPgCreateParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s3_params"]) -> 'S3S3CreateParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra"]) -> MetaOapg.properties.extra: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["configuration_id", "display_name", "description", "mysql_params", "postgresql_params", "s3_params", "extra", "region", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configuration_id"]) -> typing.Union[MetaOapg.properties.configuration_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mysql_params"]) -> typing.Union['MysqlCreateParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postgresql_params"]) -> typing.Union['PostgresqlPgCreateParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s3_params"]) -> typing.Union['S3S3CreateParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra"]) -> typing.Union[MetaOapg.properties.extra, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["configuration_id", "display_name", "description", "mysql_params", "postgresql_params", "s3_params", "extra", "region", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        configuration_id: typing.Union[MetaOapg.properties.configuration_id, str, schemas.Unset] = schemas.unset,
        display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        mysql_params: typing.Union['MysqlCreateParams', schemas.Unset] = schemas.unset,
        postgresql_params: typing.Union['PostgresqlPgCreateParams', schemas.Unset] = schemas.unset,
        s3_params: typing.Union['S3S3CreateParams', schemas.Unset] = schemas.unset,
        extra: typing.Union[MetaOapg.properties.extra, str, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudCreateRequest':
        return super().__new__(
            cls,
            *args,
            configuration_id=configuration_id,
            display_name=display_name,
            description=description,
            mysql_params=mysql_params,
            postgresql_params=postgresql_params,
            s3_params=s3_params,
            extra=extra,
            region=region,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_cloud.model.mysql_create_params import MysqlCreateParams
from beget_openapi_cloud.model.postgresql_pg_create_params import PostgresqlPgCreateParams
from beget_openapi_cloud.model.s3_s3_create_params import S3S3CreateParams
