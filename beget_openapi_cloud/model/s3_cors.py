# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class S3Cors(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            
            
            class http_method(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'http_method':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class access_control_allow_headers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'access_control_allow_headers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class access_control_expose_headers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'access_control_expose_headers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            cache_ttl = schemas.StrSchema
            fqdn = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "http_method": http_method,
                "access_control_allow_headers": access_control_allow_headers,
                "access_control_expose_headers": access_control_expose_headers,
                "cache_ttl": cache_ttl,
                "fqdn": fqdn,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["http_method"]) -> MetaOapg.properties.http_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_control_allow_headers"]) -> MetaOapg.properties.access_control_allow_headers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_control_expose_headers"]) -> MetaOapg.properties.access_control_expose_headers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cache_ttl"]) -> MetaOapg.properties.cache_ttl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fqdn"]) -> MetaOapg.properties.fqdn: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "http_method", "access_control_allow_headers", "access_control_expose_headers", "cache_ttl", "fqdn", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["http_method"]) -> typing.Union[MetaOapg.properties.http_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_control_allow_headers"]) -> typing.Union[MetaOapg.properties.access_control_allow_headers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_control_expose_headers"]) -> typing.Union[MetaOapg.properties.access_control_expose_headers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cache_ttl"]) -> typing.Union[MetaOapg.properties.cache_ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fqdn"]) -> typing.Union[MetaOapg.properties.fqdn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "http_method", "access_control_allow_headers", "access_control_expose_headers", "cache_ttl", "fqdn", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        http_method: typing.Union[MetaOapg.properties.http_method, list, tuple, schemas.Unset] = schemas.unset,
        access_control_allow_headers: typing.Union[MetaOapg.properties.access_control_allow_headers, list, tuple, schemas.Unset] = schemas.unset,
        access_control_expose_headers: typing.Union[MetaOapg.properties.access_control_expose_headers, list, tuple, schemas.Unset] = schemas.unset,
        cache_ttl: typing.Union[MetaOapg.properties.cache_ttl, str, schemas.Unset] = schemas.unset,
        fqdn: typing.Union[MetaOapg.properties.fqdn, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'S3Cors':
        return super().__new__(
            cls,
            *args,
            id=id,
            http_method=http_method,
            access_control_allow_headers=access_control_allow_headers,
            access_control_expose_headers=access_control_expose_headers,
            cache_ttl=cache_ttl,
            fqdn=fqdn,
            _configuration=_configuration,
            **kwargs,
        )
