# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class PostgresqlPostgresql164Configuration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            cpu_count = schemas.IntSchema
            disk_size = schemas.IntSchema
            memory = schemas.IntSchema
            version = schemas.StrSchema
            display_version = schemas.StrSchema
            
            
            class param_config(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StructuresParamConfig']:
                        return StructuresParamConfig
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StructuresParamConfig'], typing.List['StructuresParamConfig']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'param_config':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StructuresParamConfig':
                    return super().__getitem__(i)
            
            
            class param_default(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'param_default':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "cpu_count": cpu_count,
                "disk_size": disk_size,
                "memory": memory,
                "version": version,
                "display_version": display_version,
                "param_config": param_config,
                "param_default": param_default,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_count"]) -> MetaOapg.properties.cpu_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disk_size"]) -> MetaOapg.properties.disk_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_version"]) -> MetaOapg.properties.display_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["param_config"]) -> MetaOapg.properties.param_config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["param_default"]) -> MetaOapg.properties.param_default: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cpu_count", "disk_size", "memory", "version", "display_version", "param_config", "param_default", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_count"]) -> typing.Union[MetaOapg.properties.cpu_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disk_size"]) -> typing.Union[MetaOapg.properties.disk_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory"]) -> typing.Union[MetaOapg.properties.memory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_version"]) -> typing.Union[MetaOapg.properties.display_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["param_config"]) -> typing.Union[MetaOapg.properties.param_config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["param_default"]) -> typing.Union[MetaOapg.properties.param_default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cpu_count", "disk_size", "memory", "version", "display_version", "param_config", "param_default", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cpu_count: typing.Union[MetaOapg.properties.cpu_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        disk_size: typing.Union[MetaOapg.properties.disk_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        memory: typing.Union[MetaOapg.properties.memory, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        display_version: typing.Union[MetaOapg.properties.display_version, str, schemas.Unset] = schemas.unset,
        param_config: typing.Union[MetaOapg.properties.param_config, list, tuple, schemas.Unset] = schemas.unset,
        param_default: typing.Union[MetaOapg.properties.param_default, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PostgresqlPostgresql164Configuration':
        return super().__new__(
            cls,
            *args,
            cpu_count=cpu_count,
            disk_size=disk_size,
            memory=memory,
            version=version,
            display_version=display_version,
            param_config=param_config,
            param_default=param_default,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_cloud.model.structures_param_config import StructuresParamConfig
