# coding: utf-8

"""
    API Управляемых сервисов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_cloud import schemas  # noqa: F401


class CloudService(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            configuration_id = schemas.StrSchema
            display_name = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CREATING(cls):
                    return cls("CREATING")
                
                @schemas.classproperty
                def RUNNING(cls):
                    return cls("RUNNING")
                
                @schemas.classproperty
                def RESTARTING(cls):
                    return cls("RESTARTING")
                
                @schemas.classproperty
                def STOPPED(cls):
                    return cls("STOPPED")
                
                @schemas.classproperty
                def RECONFIGURING(cls):
                    return cls("RECONFIGURING")
            created_at = schemas.StrSchema
            price_day = schemas.Float64Schema
            price_month = schemas.Float64Schema
        
            @staticmethod
            def mysql5() -> typing.Type['MysqlMysql5']:
                return MysqlMysql5
        
            @staticmethod
            def mysql8() -> typing.Type['MysqlMysql8']:
                return MysqlMysql8
        
            @staticmethod
            def mysql84() -> typing.Type['MysqlMysql84']:
                return MysqlMysql84
        
            @staticmethod
            def postgresql15() -> typing.Type['PostgresqlPostgresql15']:
                return PostgresqlPostgresql15
        
            @staticmethod
            def postgresql14() -> typing.Type['PostgresqlPostgresql14']:
                return PostgresqlPostgresql14
        
            @staticmethod
            def postgresql164() -> typing.Type['PostgresqlPostgresql164']:
                return PostgresqlPostgresql164
        
            @staticmethod
            def s3() -> typing.Type['S3S3']:
                return S3S3
            manage_enabled = schemas.BoolSchema
            slug = schemas.StrSchema
            
            
            class monitorable_resources(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'monitorable_resources':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            unblocking = schemas.BoolSchema
            migrating = schemas.BoolSchema
            region = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MYSQL5(cls):
                    return cls("MYSQL5")
                
                @schemas.classproperty
                def MYSQL8(cls):
                    return cls("MYSQL8")
                
                @schemas.classproperty
                def MYSQL84(cls):
                    return cls("MYSQL84")
                
                @schemas.classproperty
                def POSTGRESQL14(cls):
                    return cls("POSTGRESQL14")
                
                @schemas.classproperty
                def POSTGRESQL15(cls):
                    return cls("POSTGRESQL15")
                
                @schemas.classproperty
                def S_3(cls):
                    return cls("S_3")
                
                @schemas.classproperty
                def POSTGRESQL164(cls):
                    return cls("POSTGRESQL164")
            restoring = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "configuration_id": configuration_id,
                "display_name": display_name,
                "description": description,
                "status": status,
                "created_at": created_at,
                "price_day": price_day,
                "price_month": price_month,
                "mysql5": mysql5,
                "mysql8": mysql8,
                "mysql84": mysql84,
                "postgresql15": postgresql15,
                "postgresql14": postgresql14,
                "postgresql164": postgresql164,
                "s3": s3,
                "manage_enabled": manage_enabled,
                "slug": slug,
                "monitorable_resources": monitorable_resources,
                "unblocking": unblocking,
                "migrating": migrating,
                "region": region,
                "type": type,
                "restoring": restoring,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configuration_id"]) -> MetaOapg.properties.configuration_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_day"]) -> MetaOapg.properties.price_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_month"]) -> MetaOapg.properties.price_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mysql5"]) -> 'MysqlMysql5': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mysql8"]) -> 'MysqlMysql8': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mysql84"]) -> 'MysqlMysql84': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postgresql15"]) -> 'PostgresqlPostgresql15': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postgresql14"]) -> 'PostgresqlPostgresql14': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postgresql164"]) -> 'PostgresqlPostgresql164': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s3"]) -> 'S3S3': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manage_enabled"]) -> MetaOapg.properties.manage_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monitorable_resources"]) -> MetaOapg.properties.monitorable_resources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unblocking"]) -> MetaOapg.properties.unblocking: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["migrating"]) -> MetaOapg.properties.migrating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restoring"]) -> MetaOapg.properties.restoring: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "configuration_id", "display_name", "description", "status", "created_at", "price_day", "price_month", "mysql5", "mysql8", "mysql84", "postgresql15", "postgresql14", "postgresql164", "s3", "manage_enabled", "slug", "monitorable_resources", "unblocking", "migrating", "region", "type", "restoring", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configuration_id"]) -> typing.Union[MetaOapg.properties.configuration_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_day"]) -> typing.Union[MetaOapg.properties.price_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_month"]) -> typing.Union[MetaOapg.properties.price_month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mysql5"]) -> typing.Union['MysqlMysql5', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mysql8"]) -> typing.Union['MysqlMysql8', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mysql84"]) -> typing.Union['MysqlMysql84', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postgresql15"]) -> typing.Union['PostgresqlPostgresql15', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postgresql14"]) -> typing.Union['PostgresqlPostgresql14', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postgresql164"]) -> typing.Union['PostgresqlPostgresql164', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s3"]) -> typing.Union['S3S3', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manage_enabled"]) -> typing.Union[MetaOapg.properties.manage_enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monitorable_resources"]) -> typing.Union[MetaOapg.properties.monitorable_resources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unblocking"]) -> typing.Union[MetaOapg.properties.unblocking, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["migrating"]) -> typing.Union[MetaOapg.properties.migrating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restoring"]) -> typing.Union[MetaOapg.properties.restoring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "configuration_id", "display_name", "description", "status", "created_at", "price_day", "price_month", "mysql5", "mysql8", "mysql84", "postgresql15", "postgresql14", "postgresql164", "s3", "manage_enabled", "slug", "monitorable_resources", "unblocking", "migrating", "region", "type", "restoring", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        configuration_id: typing.Union[MetaOapg.properties.configuration_id, str, schemas.Unset] = schemas.unset,
        display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        price_day: typing.Union[MetaOapg.properties.price_day, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        price_month: typing.Union[MetaOapg.properties.price_month, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mysql5: typing.Union['MysqlMysql5', schemas.Unset] = schemas.unset,
        mysql8: typing.Union['MysqlMysql8', schemas.Unset] = schemas.unset,
        mysql84: typing.Union['MysqlMysql84', schemas.Unset] = schemas.unset,
        postgresql15: typing.Union['PostgresqlPostgresql15', schemas.Unset] = schemas.unset,
        postgresql14: typing.Union['PostgresqlPostgresql14', schemas.Unset] = schemas.unset,
        postgresql164: typing.Union['PostgresqlPostgresql164', schemas.Unset] = schemas.unset,
        s3: typing.Union['S3S3', schemas.Unset] = schemas.unset,
        manage_enabled: typing.Union[MetaOapg.properties.manage_enabled, bool, schemas.Unset] = schemas.unset,
        slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
        monitorable_resources: typing.Union[MetaOapg.properties.monitorable_resources, list, tuple, schemas.Unset] = schemas.unset,
        unblocking: typing.Union[MetaOapg.properties.unblocking, bool, schemas.Unset] = schemas.unset,
        migrating: typing.Union[MetaOapg.properties.migrating, bool, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        restoring: typing.Union[MetaOapg.properties.restoring, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudService':
        return super().__new__(
            cls,
            *args,
            id=id,
            configuration_id=configuration_id,
            display_name=display_name,
            description=description,
            status=status,
            created_at=created_at,
            price_day=price_day,
            price_month=price_month,
            mysql5=mysql5,
            mysql8=mysql8,
            mysql84=mysql84,
            postgresql15=postgresql15,
            postgresql14=postgresql14,
            postgresql164=postgresql164,
            s3=s3,
            manage_enabled=manage_enabled,
            slug=slug,
            monitorable_resources=monitorable_resources,
            unblocking=unblocking,
            migrating=migrating,
            region=region,
            type=type,
            restoring=restoring,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_cloud.model.mysql_mysql5 import MysqlMysql5
from beget_openapi_cloud.model.mysql_mysql8 import MysqlMysql8
from beget_openapi_cloud.model.mysql_mysql84 import MysqlMysql84
from beget_openapi_cloud.model.postgresql_postgresql14 import PostgresqlPostgresql14
from beget_openapi_cloud.model.postgresql_postgresql15 import PostgresqlPostgresql15
from beget_openapi_cloud.model.postgresql_postgresql164 import PostgresqlPostgresql164
from beget_openapi_cloud.model.s3_s3 import S3S3
